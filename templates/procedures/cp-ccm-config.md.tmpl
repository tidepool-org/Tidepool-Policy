### Configuration Management Processes

1. Configuration management is automated using industry-recognized tools like
   Chef, Salt and Terraform to enforce secure configuration standards.

2. All changes to production systems, network devices, and firewalls are
   reviewed and approved by Security team before they are implemented to assure
   they comply with business and security requirements.

3. All changes to production systems are tested before they are implemented in
   production.

4. Implementation of approved changes are only performed by authorized
   personnel.

5. Tooling is used to generate an up to date system inventory.

    * All systems are categorized and labeled by their corresponding
      environment, such as *dev*, *test*, and *prod*.
    * All systems are classified and labeled based on the data they store or
      process, according to [{{companyShortName}} data classification
      model](assets/data-classification-and-handling.pdf).
    * The Security team maintains automation which monitors all changes to IT
      assets, generates inventory lists, using automatic IT assets discovery,
      and services provided by each cloud provider.
    * IT assets database is used to generate the diagrams and asset lists
      required by the Risk Assessment phase of {{companyShortName}}'s
      [Risk Management procedures](risk-mgmt.md)
    * {{companyShortName}} Change Management process ensures that all asset inventory
      created by automation is reconciled against real changes to production
      systems. This process includes periodic manual audits and approvals.
    * During each change implementation, the change is reviewed and verified by
      the target asset owner as needed.

6. {{companyShortName}} uses the [Security Technical Implementation Guides
   (STIGs)](http://iase.disa.mil/stigs/) published by the Defense Information
   Systems Agency as a baseline for hardening systems.

    * Windows-based systems use a baseline Active Directory group policy
      configuration in conjunction with the DISA STIGs.
    * Linux-based systems use Red Hat Enterprise Linux STIG as a guideline for
      implementation.
    * EC2 instances in AWS are provisioned using only hardened and approved
      Amazon Machine Images (AMIs).
    * Docker containers are launched using only approved Docker images that have
      been through security testing.

7. All IT assets in {{companyShortName}} have time synchronized to a single
   authoritative source.

    * On-premise systems are configured to point to an internal NTP server.
    * The internal NTP server and all AWS instances are pointing to the same set
      of ntp.org servers.

6. All frontend functionality (e.g. user dashboards and portals) is separated
   from backend (e.g. database and app servers) systems by being deployed on
   separate servers or containers.

7. All software and systems are required to complete full-scale testing before
   being promoted to production.

8. All code changes are reviewed to assure software code quality, while in
   development, to proactively detect potential security issues using
   pull-requests and static code analysis tools.  More details can be found in
   the *Software Release / Code Promotion* section.
